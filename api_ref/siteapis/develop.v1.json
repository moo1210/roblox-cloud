{
    "swagger": "2.0",
    "info": {
      "title": "Develop Api v1",
      "version": "v1"
    },
    "host": "develop.roblox.com",
    "schemes": [
      "https"
    ],
    "paths": {
      "/v1/assets/voting": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Gets the voting information of the given assets",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "assetIds",
              "description": "The ids of the Roblox.Platform.Assets.IAsset.",
              "required": true,
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "collectionFormat": "csv"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.Response.AssetVotingModel]"
              }
            }
          },
          "deprecated": true,
          "properties": {
            "internal": false,
            "obsoleteMessage": "Please use toolbox service to get asset voting information.",
            "metricIds": [
              "Assets:GetAssetVoting"
            ]
          }
        }
      },
      "/v1/gametemplates": {
        "get": {
          "tags": [
            "GameTemplates"
          ],
          "summary": "Gets a page of templates that can be used to start off making games.",
          "description": "Templates subject to change without notice.\r\nSort order of templates specified by Roblox.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.GameTemplateModel]"
              }
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "GameTemplates:GetGameTemplates"
            ]
          }
        }
      },
      "/v1/groups/{groupId}/universes": {
        "get": {
          "tags": [
            "Groups"
          ],
          "summary": "Gets a list of universes for the given group.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "groupId",
              "description": "The group id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "query",
              "name": "isArchived",
              "description": "Whether or not to return archived games.",
              "type": "boolean",
              "default": false
            },
            {
              "in": "query",
              "name": "limit",
              "description": "The number of results per request.",
              "type": "integer",
              "format": "int32",
              "default": 10,
              "enum": [
                10,
                25,
                50,
                100
              ]
            },
            {
              "in": "query",
              "name": "cursor",
              "description": "The paging cursor for the previous or next page.",
              "type": "string"
            },
            {
              "in": "query",
              "name": "sortOrder",
              "description": "Sorted by universeId",
              "type": "string",
              "default": "Asc",
              "enum": [
                "Asc",
                "Desc"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.Models.UniverseModel]"
              }
            },
            "400": {
              "description": "Invalid groupId."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Groups:GetGroupUniverses"
            ]
          }
        }
      },
      "/v1/places/{placeId}/teamcreate/active_session/members": {
        "get": {
          "tags": [
            "TeamCreate"
          ],
          "summary": "List of users in the active Team Create session",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "placeId",
              "description": "The place Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "query",
              "name": "limit",
              "description": "The number of results per request.",
              "type": "integer",
              "format": "int32",
              "default": 10,
              "enum": [
                10,
                25,
                50,
                100
              ]
            },
            {
              "in": "query",
              "name": "cursor",
              "description": "The paging cursor for the previous or next page.",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Users.SkinnyUserResponse]"
              }
            },
            "400": {
              "description": "1: The universe is invalid.\r\n5: The place is invalid."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "2: Not authorized to perform this action.\r\n4: TeamCreate on universe is disabled."
            },
            "404": {
              "description": "0: An unknown error occurred."
            },
            "500": {
              "description": "6: Multiple active sessions in a Team Create place."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "TeamCreate:GetMembersInTeamCreateActiveSessionByPlace"
            ]
          }
        }
      },
      "/v1/plugins": {
        "get": {
          "tags": [
            "Plugins"
          ],
          "summary": "Gets plugin details by ids.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "pluginIds",
              "description": "The plugin ids.",
              "required": true,
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "collectionFormat": "csv"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Plugins.PluginResponse]"
              }
            },
            "400": {
              "description": "1: Too many ids.\r\n2: The format of the ids are invalid."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Plugins:GetPlugins"
            ]
          }
        }
      },
      "/v1/universes/{universeId}": {
        "get": {
          "tags": [
            "Universes"
          ],
          "summary": "Gets a Roblox.Api.Develop.Models.UniverseModel.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The Universe id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseModel"
              }
            },
            "400": {
              "description": "1: The universe does not exist."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:GetUniverse"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/configuration": {
        "get": {
          "tags": [
            "UniverseSettings"
          ],
          "summary": "Get settings for an owned universe.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseSettingsResponse"
              }
            },
            "400": {
              "description": "1: The universe does not exist."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "2: You are not authorized to configure this universe."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "UniverseSettings:GetUniverseSettings"
            ]
          }
        },
        "patch": {
          "tags": [
            "UniverseSettings"
          ],
          "summary": "Update universe settings for an owned universe.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universeId.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "model",
              "description": "The Roblox.Api.Develop.Models.UniverseSettingsRequest model.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseSettingsRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseSettingsResponse"
              }
            },
            "400": {
              "description": "1: The universe does not exist.\r\n3: Invalid UniverseAvatarType.\r\n4: Invalid UniverseScaleType.\r\n5: Invalid UniverseAnimationType.\r\n6: Invalid UniverseCollisionType.\r\n7: New universe name or description has been rejected.\r\n8: New universe name is too long.\r\n10: Invalid UniverseBodyType.\r\n11: Invalid UniverseJointPositioningType.\r\n12: The universe has no root place.\r\n15: Price is required when isForSale is true.\r\n16: This game cannot be offered for sale because it is not public.\r\n17: This game cannot be offered for sale because it has private servers enabled.\r\n18: The game price is outside of the allowed range.\r\n19: Invalid genre.\r\n20: The request body is missing.\r\n21: Invalid device type.\r\n22: Invalid asset type.\r\n23: Invalid value, the min must be less than or equal to the max\r\n24: Invalid scale value"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n2: You are not authorized to configure this universe.\r\n14: You are not authorized to sell games."
            },
            "409": {
              "description": "9: Failed to shutdown all intances of game after changing AvatarType. The change has been reverted."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "UniverseSettings:UpdateUniverseSettings"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/configuration/vip-servers": {
        "get": {
          "tags": [
            "UniverseSettings"
          ],
          "summary": "Get settings for an owned universe's VIP servers.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.PrivateServerDetailsResponse"
              }
            },
            "400": {
              "description": "1: The universe does not exist."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "2: You are not authorized to configure this universe."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "UniverseSettings:GetPrivateServerDetails"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/permissions": {
        "get": {
          "tags": [
            "Universes"
          ],
          "summary": "Returns list of granted and declined permissions related to the universe with the id universeId for authenticated user",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UniversePermissionsModel"
              }
            },
            "400": {
              "description": "1: The universe does not exist."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:GetUniversePermissions"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/places": {
        "get": {
          "tags": [
            "Universes"
          ],
          "summary": "Gets a list of places for a universe.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The asset id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "query",
              "name": "isUniverseCreation",
              "type": "boolean",
              "default": false
            },
            {
              "in": "query",
              "name": "limit",
              "description": "The number of results per request.",
              "type": "integer",
              "format": "int32",
              "default": 10,
              "enum": [
                10,
                25,
                50,
                100
              ]
            },
            {
              "in": "query",
              "name": "cursor",
              "description": "The paging cursor for the previous or next page.",
              "type": "string"
            },
            {
              "in": "query",
              "name": "sortOrder",
              "description": "Sorted by placeId",
              "type": "string",
              "default": "Asc",
              "enum": [
                "Asc",
                "Desc"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.Models.IPlaceModel]"
              }
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:GetUniversePlaces"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/teamcreate": {
        "get": {
          "tags": [
            "TeamCreate"
          ],
          "summary": "Gets TeamCreate settings for an Roblox.Platform.Universes.IUniverse.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse"
              }
            },
            "400": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
            },
            "403": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "TeamCreate:GetTeamCreateSettings"
            ]
          }
        },
        "patch": {
          "tags": [
            "TeamCreate"
          ],
          "summary": "Edit team create settings for a universe.",
          "description": "Enables, or disables team create for a universe.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "request",
              "description": "The request body containing the team create settings.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse"
            },
            "403": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.Unauthorized\r\n0: Token Validation Failed"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "TeamCreate:SetTeamCreateSettings"
            ]
          }
        }
      },
      "/v1/universes/multiget": {
        "get": {
          "tags": [
            "Universes"
          ],
          "summary": "Gets a System.Collections.Generic.List`1.",
          "description": "If a universe can not be found for a given ID (such as -1) it will be skipped.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "description": "The universe IDs to get. Limit 100.",
              "required": true,
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseModel]"
              }
            },
            "400": {
              "description": "8: No universe IDs sent to get.\r\n9: Too many universe IDs sent to get, the limit is: "
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:GetMultiUniverses"
            ]
          }
        }
      },
      "/v1/universes/multiget/permissions": {
        "get": {
          "tags": [
            "Universes"
          ],
          "summary": "Returns an array of granted and declined permissions related to the universes with the ids in ids for the authenticated user.",
          "description": "If a universe can not be found for a given ID (such as -1) it will be skipped.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "description": "The universe ids.",
              "required": true,
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseIdPermissionsModel]"
              }
            },
            "400": {
              "description": "8: No universe IDs sent to get.\r\n9: Too many universe IDs sent to get, the limit is: "
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:MultiGetUniversePermissions"
            ]
          }
        }
      },
      "/v1/universes/multiget/teamcreate": {
        "get": {
          "tags": [
            "TeamCreate"
          ],
          "summary": "Gets TeamCreate settings for multiple universes specified by Ids",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "ids",
              "required": true,
              "type": "array",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel]"
              }
            },
            "400": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TooManyUniverseIdsSent"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "TeamCreate:MultiGetTeamCreateSettings"
            ]
          }
        }
      },
      "/v1/user/{userId}/canmanage/{assetId}": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Returns whether the user can manage a given asset.",
          "parameters": [
            {
              "in": "path",
              "name": "userId",
              "description": "The ID of the user.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "path",
              "name": "assetId",
              "description": "The ID of the asset.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          },
          "deprecated": true,
          "properties": {
            "internal": false,
            "obsoleteMessage": "Use Asset Permissions API instead.",
            "metricIds": [
              "User:CanManage"
            ]
          }
        }
      },
      "/v1/user/groups/canmanage": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Gets a list of Groups that a user can manage.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.GroupModel]"
              }
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "User:GetManagableGroups"
            ]
          }
        }
      },
      "/v1/user/groups/canmanagegamesoritems": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Gets a list of groups a user can manage games or items for.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.GroupModel]"
              }
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "User:GetUserCanManageGamesItemsGroups"
            ]
          }
        }
      },
      "/v1/user/universes": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Gets a list of universes for the authenticated user.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "isArchived",
              "description": "Whether or not to return archived games.",
              "type": "boolean",
              "default": false
            },
            {
              "in": "query",
              "name": "limit",
              "description": "The number of results per request.",
              "type": "integer",
              "format": "int32",
              "default": 10,
              "enum": [
                10,
                25,
                50,
                100
              ]
            },
            {
              "in": "query",
              "name": "cursor",
              "description": "The paging cursor for the previous or next page.",
              "type": "string"
            },
            {
              "in": "query",
              "name": "sortOrder",
              "description": "Sorted by universeId",
              "type": "string",
              "default": "Asc",
              "enum": [
                "Asc",
                "Desc"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.Models.UniverseModel]"
              }
            },
            "400": {
              "description": "cursor is not valid."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "User:GetUserUniverses"
            ]
          }
        }
      },
      "/v1/places/{placeId}": {
        "patch": {
          "tags": [
            "Places"
          ],
          "summary": "Updates the place configuration for the place with the id placeId",
          "description": "Currently the only supported functionality for updating the configuration is around Name, and Description.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "placeId",
              "description": "The place id for the place to be updated.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "configuration",
              "description": "",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceConfigurationModel"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceModel"
              }
            },
            "400": {
              "description": "placeId is invalid."
            },
            "403": {
              "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Places:UpdatePlaceConfiguration"
            ]
          }
        },
        "post": {
          "tags": [
            "Places"
          ],
          "summary": "Updates the place configuration for the place with the id placeId",
          "description": "Currently the only supported functionality for updating the configuration is around Name, and Description.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "placeId",
              "description": "The place id for the place to be updated.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "configuration",
              "description": "",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceConfigurationModel"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.PlaceModel"
              }
            },
            "400": {
              "description": "placeId is invalid."
            },
            "403": {
              "description": "Authenticated user is not authorized to manage this place.\r\n0: Token Validation Failed"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Places:UpdatePlaceConfiguration"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/activate": {
        "post": {
          "tags": [
            "Universes"
          ],
          "summary": "Activates a universes.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe.\r\n6: The root place for this universe is under review and can not be activated.\r\n7: Creator already has the maximum number of places active."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:ActivateUniverse"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/aliases": {
        "post": {
          "tags": [
            "Aliases"
          ],
          "summary": "Creates an alias.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "request",
              "description": "The request body containing the alias attributes.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.AliasRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "1: The request body is missing.\r\n2: The alias name is required.\r\n3: The alias type is required.\r\n4: The alias target is required.\r\n6: The alias name is invalid."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n10: You are not authorized to configure this universe."
            },
            "404": {
              "description": "7: The universe does not exist."
            },
            "409": {
              "description": "8: An alias with the provided name already exists."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Aliases:CreateAlias"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/deactivate": {
        "post": {
          "tags": [
            "Universes"
          ],
          "summary": "Deactivates a universe.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "1: The universe does not exist.\r\n2: This universe does not have a root place."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n3: You are not authorized to configure this universe."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Universes:DeactivateUniverse"
            ]
          }
        }
      },
      "/v1/plugins/{pluginId}": {
        "patch": {
          "tags": [
            "Plugins"
          ],
          "summary": "Updates a plugin.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "pluginId",
              "description": "The id of the plugin.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "request",
              "description": "The Roblox.Develop.Api.UpdatePluginRequest.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Develop.Api.UpdatePluginRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "5: Description too long.\r\n6: Text moderated.\r\n7: Invalid name.\r\n8: The request body is missing."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n4: Insufficient permissions."
            },
            "404": {
              "description": "3: The id is invalid."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Plugins:UpdatePlugin"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/aliases/{name}": {
        "delete": {
          "tags": [
            "Aliases"
          ],
          "summary": "Deletes an alias.",
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "path",
              "name": "name",
              "description": "The name of the alias to delete.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n10: You are not authorized to configure this universe."
            },
            "404": {
              "description": "7: The universe does not exist.\r\n9: An alias with the provided name does not exist."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Aliases:DeleteAlias"
            ]
          }
        },
        "patch": {
          "tags": [
            "Aliases"
          ],
          "summary": "Updates an alias.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "path",
              "name": "name",
              "description": "The name of the alias to update.",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "description": "The request body containing the alias attributes to update.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.AliasRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "1: The request body is missing.\r\n5: Either none or both alias type and target should be provided.\r\n6: The alias name is invalid."
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            },
            "403": {
              "description": "0: Token Validation Failed\r\n10: You are not authorized to configure this universe."
            },
            "404": {
              "description": "7: The universe does not exist.\r\n9: An alias with the provided name does not exist."
            },
            "409": {
              "description": "8: An alias with the provided name already exists."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "Aliases:UpdateAlias"
            ]
          }
        }
      },
      "/v1/universes/{universeId}/teamcreate/memberships": {
        "delete": {
          "tags": [
            "TeamCreate"
          ],
          "summary": "Removes a user from a TeamCreate permissions list.",
          "consumes": [
            "application/json",
            "text/json"
          ],
          "produces": [
            "application/json",
            "text/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "universeId",
              "description": "The universe Id.",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "request",
              "description": "The request body.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Roblox.Api.Develop.Models.TeamCreateMembershipRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
              }
            },
            "400": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUniverse OR Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.InvalidUser"
            },
            "403": {
              "description": "Roblox.Api.Develop.ResponseEnums.TeamCreateErrors.TeamCreateDisabled\r\n0: Token Validation Failed"
            },
            "401": {
              "description": "0: Authorization has been denied for this request."
            }
          },
          "properties": {
            "internal": false,
            "metricIds": [
              "TeamCreate:DeleteTeamCreateMembership"
            ]
          }
        }
      }
    },
    "definitions": {
      "Roblox.Api.Develop.Models.AliasRequest": {
        "description": "Request model for an asset alias.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Alias name. Required when creating an alias, optional for an update.",
            "type": "string"
          },
          "type": {
            "format": "int32",
            "description": "Alias type. Required when creating an alias, optional for an update.",
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer"
          },
          "targetId": {
            "format": "int64",
            "description": "Alias target. Required when creating an alias, optional for an update.",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.GameTemplateModel": {
        "description": "Represents a game template in API endpoint responses.",
        "type": "object",
        "properties": {
          "gameTemplateType": {
            "description": "The type of this game template.",
            "type": "string"
          },
          "hasTutorials": {
            "description": "Whether this game template has tutorials.",
            "type": "boolean"
          },
          "universe": {
            "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseModel"
          }
        }
      },
      "Roblox.Api.Develop.Models.GroupModel": {
        "description": "A model containing information about a group",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The Roblox.Platform.Groups.IGroup's Id.",
            "type": "integer"
          },
          "name": {
            "description": "The Roblox.Platform.Groups.IGroup's name.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.IPlaceModel": {
        "description": "A model containing information about a place",
        "type": "object"
      },
      "Roblox.Api.Develop.Models.PlaceConfigurationModel": {
        "description": "A model containing information about a place to be configured",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name for the place.",
            "type": "string"
          },
          "description": {
            "description": "The new description for the place.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.PlaceModel": {
        "description": "A model containing information about a place",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Returns the place id.",
            "type": "integer"
          },
          "universeId": {
            "format": "int64",
            "description": "Returns the id of the place's universe, or null - if the place is not part of a universe.",
            "type": "integer"
          },
          "name": {
            "description": "Returns the place name.",
            "type": "string"
          },
          "description": {
            "description": "Returns the place description.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.PrivateServerDetailsResponse": {
        "description": "Model for private server details responses from the UniverseSettings controller.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not VIP servers are enabled on this universe.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "The price of the VIP server.",
            "type": "integer"
          },
          "activeServersCount": {
            "format": "int64",
            "description": "The number of active VIP servers for this universe. A negative value indicates at least this many exist (i.e. -100 means 100+ active private servers).",
            "type": "integer"
          },
          "activeSubscriptionsCount": {
            "format": "int64",
            "description": "The number of active VIP server subscriptions. A negative value indicates at least this many exist (i.e. -100 means 100+ active subscriptions).",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.Response.AssetVotingModel": {
        "description": "Asset voting information",
        "type": "object",
        "properties": {
          "assetId": {
            "format": "int64",
            "description": "The !:IAsset's id.",
            "type": "integer"
          },
          "hasUserVoted": {
            "description": "Whether the user has voted on this !:IAsset.",
            "type": "boolean"
          },
          "canUserVote": {
            "description": "Whether the user can vote on this !:IAsset.",
            "type": "boolean"
          },
          "shouldShowVotes": {
            "description": "Whether votes should be shown.",
            "type": "boolean"
          },
          "upVotes": {
            "format": "int64",
            "description": "The number of up votes.",
            "type": "integer"
          },
          "downVotes": {
            "format": "int64",
            "description": "The number of down votes.",
            "type": "integer"
          },
          "reasonForNotAbleToVote": {
            "description": "The reason this !:IAsset cannot be voted on.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.Response.TeamCreateSettingsResponse": {
        "description": "Team create settings",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not the universe should be enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.TeamCreateMembershipRequest": {
        "description": "Request model for a TeamCreate membership",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The id of the user.",
            "type": "integer"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseIdPermissionsModel": {
        "description": "A model containing information about a universe permissions",
        "type": "object",
        "properties": {
          "universeId": {
            "format": "int64",
            "description": "The universe Id these permissions reference",
            "type": "integer"
          },
          "canManage": {
            "description": "Determines whether or not consumer can manage the target universe",
            "type": "boolean"
          },
          "canCloudEdit": {
            "description": "Determines whether or not consumer can cloud the target universe\r\nThis is only nullable/optional in the context of https://develop.roblox.com/docs#!/Universes/get_v1_universes_universeId_context_permissions endpoint which is consumed only internally. It should be computed and set for all other usages.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseModel": {
        "description": "Represents a universe in API endpoint results.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the universe",
            "type": "string"
          },
          "description": {
            "description": "The description of the universe",
            "type": "string"
          },
          "isArchived": {
            "description": "Is this universe archived",
            "type": "boolean"
          },
          "rootPlaceId": {
            "format": "int64",
            "description": "The universe's root place id",
            "type": "integer"
          },
          "isActive": {
            "description": "Is this universe active",
            "type": "boolean"
          },
          "privacyType": {
            "description": "The universe's privacy type.",
            "type": "string"
          },
          "creatorType": {
            "description": "The creator type, either \"User\" or \"Group\"",
            "type": "string"
          },
          "creatorTargetId": {
            "format": "int64",
            "description": "The id of the user or group that created this universe.",
            "type": "integer"
          },
          "creatorName": {
            "description": "The name of the creator of the universe.",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "The created System.DateTime",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The updated System.DateTime",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniversePermissionsModel": {
        "description": "A model containing information about a universe permissions",
        "type": "object",
        "properties": {
          "canManage": {
            "description": "Determines whether or not consumer can manage the target universe",
            "type": "boolean"
          },
          "canCloudEdit": {
            "description": "Determines whether or not consumer can cloud the target universe\r\nThis is only nullable/optional in the context of https://develop.roblox.com/docs#!/Universes/get_v1_universes_universeId_context_permissions endpoint which is consumed only internally. It should be computed and set for all other usages.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsRequest": {
        "description": "Model for UniverseSettings patch requests",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the universe.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe.",
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer"
          },
          "universeScaleType": {
            "format": "int32",
            "description": "Whether custom scales allowed in the universe.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeBodyType": {
            "format": "int32",
            "description": "What avatar body types are allowed by the universe.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning type is allowed by the universe.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "isArchived": {
            "description": "Archive status of the universe.",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre.",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Sets whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseSettingsResponse": {
        "description": "Model for UniverseSettings controller responses",
        "type": "object",
        "properties": {
          "allowPrivateServers": {
            "description": "If the universe allows the use of private servers.",
            "type": "boolean"
          },
          "privateServerPrice": {
            "format": "int64",
            "description": "The price to purchase a private server in robux.",
            "type": "integer"
          },
          "isMeshTextureApiAccessAllowed": {
            "description": "Whether access to APIs for mesh and texture is enabled for this universe.",
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "description": "The universe Id.",
            "type": "integer"
          },
          "name": {
            "description": "The universe name.",
            "type": "string"
          },
          "universeAvatarType": {
            "format": "int32",
            "description": "Which avatar types are allowed in the universe. ['MorphToR6' = 1, 'PlayerChoice' = 2, 'MorphToR15' = 3]",
            "enum": [
              1,
              2,
              3
            ],
            "type": "integer"
          },
          "universeScaleType": {
            "format": "int32",
            "description": "Whether custom scales allowed in the universe. ['NoScales' = 1, 'AllScales' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeAnimationType": {
            "format": "int32",
            "description": "Whether custom animations are allowed in the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeCollisionType": {
            "format": "int32",
            "description": "What type of collisions are used by the universe. ['InnerBox' = 1, 'OuterBox' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeBodyType": {
            "format": "int32",
            "description": "What avatar body types are allowed by the universe. ['Standard' = 1, 'PlayerChoice' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "universeJointPositioningType": {
            "format": "int32",
            "description": "What avatar joint positioning is allowed by the universe. ['Standard' = 1, 'ArtistIntent' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "isArchived": {
            "description": "Archive status of the universe",
            "type": "boolean"
          },
          "isFriendsOnly": {
            "description": "Whether game access is limited to friends for user-owned games or group members for group-owned games.",
            "type": "boolean"
          },
          "genre": {
            "format": "int32",
            "description": "Game genre. ['All' = 0, 'Tutorial' = 1, 'Scary' = 2, 'TownAndCity' = 3, 'War' = 4, 'Funny' = 5, 'Fantasy' = 6, 'Adventure' = 7, 'SciFi' = 8, 'Pirate' = 9, 'FPS' = 10, 'RPG' = 11, 'Sports' = 12, 'Ninja' = 13, 'WildWest' = 14]",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14
            ],
            "type": "integer"
          },
          "playableDevices": {
            "description": "List of device types this game can be played on.",
            "type": "array",
            "items": {
              "format": "int32",
              "description": " ['Computer' = 1, 'Phone' = 2, 'Tablet' = 3, 'Console' = 4, 'VR' = 5]",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ],
              "type": "integer"
            }
          },
          "isForSale": {
            "description": "Whether the game is offered for sale.",
            "type": "boolean"
          },
          "price": {
            "format": "int64",
            "description": "Price of the game, in Robux.",
            "type": "integer"
          },
          "isStudioAccessToApisAllowed": {
            "description": "Whether studio access to APIs is allowed or not.",
            "type": "boolean"
          },
          "privacyType": {
            "description": "Privacy type of the universe.",
            "type": "string"
          }
        }
      },
      "Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel": {
        "description": "Team create settings of a universe",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "Id of the universe.",
            "type": "integer"
          },
          "isEnabled": {
            "description": "Whether or not the universe is enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Api.Develop.Models.UpdateTeamCreateSettingsRequest": {
        "description": "Team create settings request",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "Whether or not the universe should be enabled for team create",
            "type": "boolean"
          }
        }
      },
      "Roblox.Develop.Api.UpdatePluginRequest": {
        "description": "A request model for updating a plugin.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The new plugin name.",
            "type": "string"
          },
          "description": {
            "description": "The new plugin description.",
            "type": "string"
          },
          "commentsEnabled": {
            "description": "Whether or not comments should be enabled.",
            "type": "boolean"
          }
        }
      },
      "Roblox.Paging.StartIndexCursor": {
        "type": "object",
        "properties": {
          "startIndex": {
            "format": "int64",
            "type": "integer"
          },
          "discriminator": {
            "type": "string"
          },
          "count": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]": {
        "type": "object",
        "properties": {
          "SortOrder": {
            "format": "int32",
            "description": " ['Asc' = 1, 'Desc' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer",
            "readOnly": true
          },
          "PagingDirection": {
            "format": "int32",
            "description": " ['Forward' = 1, 'Backward' = 2]",
            "enum": [
              1,
              2
            ],
            "type": "integer",
            "readOnly": true
          },
          "Count": {
            "format": "int32",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "Roblox.Web.Responses.Plugins.PluginResponse": {
        "description": "Represents information about a plugin.",
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "description": "The plugin Id.",
            "type": "integer"
          },
          "name": {
            "description": "The plugin name.",
            "type": "string"
          },
          "description": {
            "description": "The plugin description.",
            "type": "string"
          },
          "commentsEnabled": {
            "description": "Whether or not the plugin allows comments to be posted.",
            "type": "boolean"
          },
          "versionId": {
            "format": "int64",
            "description": "plugin version id",
            "type": "integer"
          },
          "created": {
            "format": "date-time",
            "description": "The time the plugin was created.",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "The last time the plugin was updated.",
            "type": "string"
          }
        }
      },
      "Roblox.Web.Responses.Users.SkinnyUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
        "type": "object"
      },
      "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]": {
        "type": "object",
        "properties": {
          "ExclusiveStartKeyInfo": {
            "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]"
          },
          "CursorRecipe": {
            "type": "string"
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.GameTemplateModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.GameTemplateModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.GroupModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.GroupModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.Response.AssetVotingModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.Response.AssetVotingModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseIdPermissionsModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseIdPermissionsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseTeamCreateSettingsModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Plugins.PluginResponse]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Web.Responses.Plugins.PluginResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Users.SkinnyUserResponse]": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Web.Responses.Users.SkinnyUserResponse"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.Models.IPlaceModel]": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.IPlaceModel"
            }
          }
        }
      },
      "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Api.Develop.Models.UniverseModel]": {
        "type": "object",
        "properties": {
          "previousPageCursor": {
            "type": "string"
          },
          "nextPageCursor": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Roblox.Api.Develop.Models.UniverseModel"
            }
          }
        }
      }
    }
  }