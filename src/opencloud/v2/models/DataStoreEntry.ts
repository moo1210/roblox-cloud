/**
 * Cloud API
 * Open Cloud 2.0
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../../../common/http/http';

/**
* A key-value entry in a data store.
*/
export class DataStoreEntry {
    /**
    * The resource path of the data store entry.  Format:  universes/{universe}/data-stores/{data_store}/entries/{data_store_entry}  Format:  universes/{universe}/data-stores/{data_store}/scopes/{data_store_scope}/entries/{data_store_entry}
    */
    'path'?: string;
    /**
    * The timestamp when the data store entry was created.
    */
    'createTime'?: Date;
    /**
    * The revision ID of the data store entry.   A new revision is committed whenever the entry is changed in any way.   The format is an arbitrary string.  Example: \"foo\"
    */
    'revisionId'?: string;
    /**
    * The timestamp when the revision was created.
    */
    'revisionCreateTime'?: Date;
    /**
    * The state of the data store entry.  Possible values:    | Value | Description |   | --- | --- |   | STATE_UNSPECIFIED | The default value. This value is used if the state is omitted. |   | ACTIVE | The default state of a newly created data store entry. |   | DELETED | The data store entry is marked as deleted. At some point in the future, it will be permanently deleted. |
    */
    'state'?: DataStoreEntryStateEnum;
    /**
    * This checksum is computed by the server based on the value of other  fields, and may be sent on update and delete requests (and potentially  on certain custom methods) to ensure the client has an up-to-date  value before proceeding.
    */
    'etag'?: string;
    /**
    * Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
    */
    'value'?: any | null;
    /**
    * The resource ID of the entry.   This matches the last segment of the resource path, and is provided  only for convenience.
    */
    'id'?: string;
    /**
    * Users associated with the entry.
    */
    'users'?: Array<string>;
    /**
    * An arbitrary set of attributes associated with the entry.
    */
    'attributes'?: any;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "createTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "revisionId",
            "baseName": "revisionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "revisionCreateTime",
            "baseName": "revisionCreateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "DataStoreEntryStateEnum",
            "format": "enum"
        },
        {
            "name": "etag",
            "baseName": "etag",
            "type": "string",
            "format": ""
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "any",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return DataStoreEntry.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum DataStoreEntryStateEnum {
    StateUnspecified = 'STATE_UNSPECIFIED',
    Active = 'ACTIVE',
    Deleted = 'DELETED'
}

