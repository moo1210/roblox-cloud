/**
 * Cloud API
 * Open Cloud 2.0
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Money } from '../models/Money';
import { HttpFile } from '../../../common/http/http';

/**
* Represents a product in the Creator Store.
*/
export class CreatorStoreProduct {
    /**
    * The resource path of the Creator Store product.   Format: creator-store-products/{creator_store_product}
    */
    'path'?: string;
    /**
    * The display name of the product.
    */
    'displayName'?: string;
    /**
    * The description of the product.
    */
    'description'?: string;
    'basePrice'?: Money;
    'purchasePrice'?: Money;
    /**
    * Whether the product is considered published, from the seller\'s perspective.
    */
    'published'?: boolean;
    /**
    * Restrictions applied to the product. A product can have multiple  restrictions active at one time.  Possible values:    | Value | Description |   | --- | --- |   | RESTRICTION_UNSPECIFIED | Unspecified restriction. |   | SOLD_ITEM_RESTRICTED | The item being sold has been restricted by Roblox Details may be available by looking up that item directly. |   | SELLER_TEMPORARILY_RESTRICTED | The product is restricted because the seller\'s account is temporarily restricted by Roblox. |   | SELLER_PERMANENTLY_RESTRICTED | The product is restricted because the seller\'s account is permanently restricted by Roblox. |   | SELLER_NO_LONGER_ACTIVE | The product is restricted because the seller\'s account was deleted or is otherwise no longer active. |
    */
    'restrictions'?: Array<CreatorStoreProductRestrictionsEnum>;
    /**
    * Whether the product is purchasable.   For this value to be true, `published` must be true and `restrictions` must  be empty.
    */
    'purchasable'?: boolean;
    /**
    * The Roblox user selling the product. For now, this value is always a  Roblox user, but code should assume this field may expand to other types  of sellers, such as groups, in the future.
    */
    'userSeller'?: string;
    /**
    * The Roblox group selling the product.
    */
    'groupSeller'?: string;
    /**
    * The Creator Store product is a model with this asset ID.
    */
    'modelAssetId'?: string;
    /**
    * The Creator Store product is a plugin with this asset ID.   Supported base prices in USD: 0, 4.99, 5.99, 6.99, 7.99, 8.99, 9.99,  10.99, 11.99, 12.99, 13.99, 14.99, 15.99, 16.99, 17.99, 18.99, 19.99,  24.99, 29.99, 34.99, 39.99, 44.99, 49.99, 59.99, 69.99, 79.99, 89.99,  99.99, 149.99, 199.99, 249.99
    */
    'pluginAssetId'?: string;
    /**
    * The Creator Store product is an audio file with this asset ID.
    */
    'audioAssetId'?: string;
    /**
    * The Creator Store product is a decal with this asset ID.
    */
    'decalAssetId'?: string;
    /**
    * The Creator Store product is a mesh part with this asset ID.
    */
    'meshPartAssetId'?: string;
    /**
    * The Creator Store product is a video with this asset ID.
    */
    'videoAssetId'?: string;
    /**
    * The Creator Store product is a font family with this asset ID.
    */
    'fontFamilyAssetId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "basePrice",
            "baseName": "basePrice",
            "type": "Money",
            "format": ""
        },
        {
            "name": "purchasePrice",
            "baseName": "purchasePrice",
            "type": "Money",
            "format": ""
        },
        {
            "name": "published",
            "baseName": "published",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "restrictions",
            "baseName": "restrictions",
            "type": "Array<CreatorStoreProductRestrictionsEnum>",
            "format": "enum"
        },
        {
            "name": "purchasable",
            "baseName": "purchasable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "userSeller",
            "baseName": "userSeller",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupSeller",
            "baseName": "groupSeller",
            "type": "string",
            "format": ""
        },
        {
            "name": "modelAssetId",
            "baseName": "modelAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "pluginAssetId",
            "baseName": "pluginAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "audioAssetId",
            "baseName": "audioAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "decalAssetId",
            "baseName": "decalAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "meshPartAssetId",
            "baseName": "meshPartAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "videoAssetId",
            "baseName": "videoAssetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "fontFamilyAssetId",
            "baseName": "fontFamilyAssetId",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CreatorStoreProduct.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum CreatorStoreProductRestrictionsEnum {
    RestrictionUnspecified = 'RESTRICTION_UNSPECIFIED',
    SoldItemRestricted = 'SOLD_ITEM_RESTRICTED',
    SellerTemporarilyRestricted = 'SELLER_TEMPORARILY_RESTRICTED',
    SellerPermanentlyRestricted = 'SELLER_PERMANENTLY_RESTRICTED',
    SellerNoLongerActive = 'SELLER_NO_LONGER_ACTIVE'
}

