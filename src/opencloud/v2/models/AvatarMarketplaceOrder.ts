/**
 * Cloud API
 * Open Cloud 2.0
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AvatarMarketplaceOrderContext } from '../models/AvatarMarketplaceOrderContext';
import { AvatarMarketplaceOrderFulfillmentGroup } from '../models/AvatarMarketplaceOrderFulfillmentGroup';
import { AvatarMarketplaceOrderReceipt } from '../models/AvatarMarketplaceOrderReceipt';
import { HttpFile } from '../../../common/http/http';

/**
* Represents an order in the Avatar Marketplace.
*/
export class AvatarMarketplaceOrder {
    /**
    * The resource path of the avatar marketplace order.  Format: avatar-marketplace-orders/{avatar_marketplace_order}
    */
    'path'?: string;
    /**
    * Purchaser of the order.
    */
    'purchasingUser'?: string;
    /**
    * List of fulfillment groups in the order.
    */
    'fulfillmentGroups'?: Array<AvatarMarketplaceOrderFulfillmentGroup>;
    /**
    * Place the order was made in, if it was made in a place.
    */
    'purchasePlace'?: string;
    'context'?: AvatarMarketplaceOrderContext;
    /**
    * Time at which the order was created.
    */
    'createTime'?: Date;
    /**
    * Fulfillment state of the whole order.  Possible values:    | Value | Description |   | --- | --- |   | UNKNOWN | Default value. |   | PENDING | Pending fulfillment. |   | RESERVED | Items to be purchased are finalized, but not yet fully fulfilled. |   | SUCCEEDED | Successfully fulfilled. |   | FAILED | Failed. |
    */
    'status'?: AvatarMarketplaceOrderStatusEnum;
    'receipt'?: AvatarMarketplaceOrderReceipt;
    /**
    * An encrypted batch purchase authentication token that is required when  making in-experience purchases. This is only used by the first-party use  case of purchasing collectibles in-experience via Game Engine  PromptPurchase. The token is fetched from backends by RCC and passed back  to the Roblox Client to include here into the Order creation request to  prove the purchase was authorized by the experience creator. As a UML  Sequence Diagram:    participant User    participant Client    participant RCC    participant OrdersApi    participant Collectibles    User -> RCC: Completed Quest, trigger PromptBulkPurchase    RCC -> Collectibles: GenerateBatchPurchaseAuthToken    RCC -> Client: PromptBulkPurchase w/ AuthToken    Client -> User: Show Purchase Prompt    User -> Client: Approve purchase    Client -> OrdersApi: CreateOrder w/ AuthToken + User Auth
    */
    'batchPurchaseAuthToken'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "path",
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        {
            "name": "purchasingUser",
            "baseName": "purchasingUser",
            "type": "string",
            "format": ""
        },
        {
            "name": "fulfillmentGroups",
            "baseName": "fulfillmentGroups",
            "type": "Array<AvatarMarketplaceOrderFulfillmentGroup>",
            "format": ""
        },
        {
            "name": "purchasePlace",
            "baseName": "purchasePlace",
            "type": "string",
            "format": ""
        },
        {
            "name": "context",
            "baseName": "context",
            "type": "AvatarMarketplaceOrderContext",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "createTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AvatarMarketplaceOrderStatusEnum",
            "format": "enum"
        },
        {
            "name": "receipt",
            "baseName": "receipt",
            "type": "AvatarMarketplaceOrderReceipt",
            "format": ""
        },
        {
            "name": "batchPurchaseAuthToken",
            "baseName": "batchPurchaseAuthToken",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return AvatarMarketplaceOrder.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum AvatarMarketplaceOrderStatusEnum {
    Unknown = 'UNKNOWN',
    Pending = 'PENDING',
    Reserved = 'RESERVED',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED'
}

