/**
 * Cloud API
 * Open Cloud 2.0
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../../../common/http/http';

/**
* Specific item in the order.
*/
export class AvatarMarketplaceOrderLineItem {
    /**
    * ID of the product to purchase if it is a Collectible.
    */
    'collectibleProductId'?: string;
    /**
    * ID of the product to purchase in the VirtualEconomy system.
    */
    'virtualEconomyProductId'?: string;
    /**
    * Instance ID for a Limited 1.0 item (aka UserAssetId).
    */
    'limitedV1InstanceId'?: string;
    /**
    * Agreed price on the item. Transcoded as string in JSON.
    */
    'agreedPriceRobux'?: number;
    /**
    * ID of the asset being purchased if it is an asset.
    */
    'assetId'?: string;
    /**
    * ID of the bundle being purchased if it is a Bundle.
    */
    'bundleId'?: string;
    /**
    * Status of the line item.  Possible values:    | Value | Description |   | --- | --- |   | UNKNOWN | Default value. |   | PENDING | Pending fulfillment. |   | RESERVED | Items to be purchased are finalized, but not yet fully fulfilled. |   | SUCCEEDED | Successfully fulfilled. |   | FAILED | Failed. |
    */
    'status'?: AvatarMarketplaceOrderLineItemStatusEnum;
    /**
    * Reason for the error, if the status is an error status.  Possible values:    | Value | Description |   | --- | --- |   | UNKNOWN | Unset or unknown. |   | INTERNAL | Internal error. |   | INSUFFICIENT_ROBUX | Insufficient robux. |   | QUOTA_EXCEEDED | Purchase quota exceeded for the user or product. |   | INVALID_REQUEST | Request is invalid. |   | INVALID_PRODUCT_TYPE | Product type is invalid or unsupported. |   | NOT_FOR_SALE | Product is not for sale. |   | NOT_AVAILABLE_FOR_PURCHASER | Product is not available for purchase by the purchaser. |   | PRICE_MISMATCH | Price provided does not match the product price. |   | SOLD_OUT | Product is sold out. |   | PURCHASE_PLACE_INVALID | The place specified by `purchase_place` is not valid for this purchase. |   | PURCHASER_IS_SELLER | The purchaser is the same as the seller, which is not allowed for resales. |   | EXPERIENCE_VERIFICATION_ERROR | Could not verify the user is in the given experience for an in-experience purchase. |   | QUANTITY_LIMIT_EXCEEDED | Quantity limit per-user exceeded. |   | MISSING_PURCHASE_AUTH_TOKEN | Purchase authentication token is needed but is missing. |   | INVALID_PURCHASE_AUTH_TOKEN | Provided purchase authentication token is invalid. |   | ALREADY_OWNED | Purchaser already owns this item. |   | INSUFFICIENT_MEMBERSHIP | Purchaser does not have the necessary premium membership to purchase this item at this price. |   | ACCOUNT_RESTRICTED | Purchaser\'s account is restricted. |
    */
    'errorReason'?: AvatarMarketplaceOrderLineItemErrorReasonEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "collectibleProductId",
            "baseName": "collectibleProductId",
            "type": "string",
            "format": ""
        },
        {
            "name": "virtualEconomyProductId",
            "baseName": "virtualEconomyProductId",
            "type": "string",
            "format": ""
        },
        {
            "name": "limitedV1InstanceId",
            "baseName": "limitedV1InstanceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "agreedPriceRobux",
            "baseName": "agreedPriceRobux",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "assetId",
            "baseName": "assetId",
            "type": "string",
            "format": ""
        },
        {
            "name": "bundleId",
            "baseName": "bundleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AvatarMarketplaceOrderLineItemStatusEnum",
            "format": "enum"
        },
        {
            "name": "errorReason",
            "baseName": "errorReason",
            "type": "AvatarMarketplaceOrderLineItemErrorReasonEnum",
            "format": "enum"
        }    ];

    static getAttributeTypeMap() {
        return AvatarMarketplaceOrderLineItem.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum AvatarMarketplaceOrderLineItemStatusEnum {
    Unknown = 'UNKNOWN',
    Pending = 'PENDING',
    Reserved = 'RESERVED',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED'
}
export enum AvatarMarketplaceOrderLineItemErrorReasonEnum {
    Unknown = 'UNKNOWN',
    Internal = 'INTERNAL',
    InsufficientRobux = 'INSUFFICIENT_ROBUX',
    QuotaExceeded = 'QUOTA_EXCEEDED',
    InvalidRequest = 'INVALID_REQUEST',
    InvalidProductType = 'INVALID_PRODUCT_TYPE',
    NotForSale = 'NOT_FOR_SALE',
    NotAvailableForPurchaser = 'NOT_AVAILABLE_FOR_PURCHASER',
    PriceMismatch = 'PRICE_MISMATCH',
    SoldOut = 'SOLD_OUT',
    PurchasePlaceInvalid = 'PURCHASE_PLACE_INVALID',
    PurchaserIsSeller = 'PURCHASER_IS_SELLER',
    ExperienceVerificationError = 'EXPERIENCE_VERIFICATION_ERROR',
    QuantityLimitExceeded = 'QUANTITY_LIMIT_EXCEEDED',
    MissingPurchaseAuthToken = 'MISSING_PURCHASE_AUTH_TOKEN',
    InvalidPurchaseAuthToken = 'INVALID_PURCHASE_AUTH_TOKEN',
    AlreadyOwned = 'ALREADY_OWNED',
    InsufficientMembership = 'INSUFFICIENT_MEMBERSHIP',
    AccountRestricted = 'ACCOUNT_RESTRICTED'
}

