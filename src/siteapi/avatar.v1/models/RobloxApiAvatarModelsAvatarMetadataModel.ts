/**
 * Avatar Api v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../../../common/http/http';

/**
* A model containing website metadata for avatars
*/
export class RobloxApiAvatarModelsAvatarMetadataModel {
    /**
    * Whether or not to show the Default Clothing message
    */
    'enableDefaultClothingMessage'?: boolean;
    /**
    * Whether or not the Scales is embedded in the tab
    */
    'isAvatarScaleEmbeddedInTab'?: boolean;
    /**
    * Whether or not the Boby Type scale is embedded in the tab
    */
    'isBodyTypeScaleOutOfTab'?: boolean;
    /**
    * How much the height scaler should increment by
    */
    'scaleHeightIncrement'?: number;
    /**
    * How much the width scaler should increment by
    */
    'scaleWidthIncrement'?: number;
    /**
    * How much the head scaler should increment by
    */
    'scaleHeadIncrement'?: number;
    /**
    * How much the proportion scaler should increment by
    */
    'scaleProportionIncrement'?: number;
    /**
    * How much the body type scaler should increment by
    */
    'scaleBodyTypeIncrement'?: number;
    /**
    * Whether or not to support proportion and body type
    */
    'supportProportionAndBodyType'?: boolean;
    /**
    * Whether or not to show the default clothing message when the page loads
    */
    'showDefaultClothingMessageOnPageLoad'?: boolean;
    /**
    * Whether or not 3D thumbnails are shown
    */
    'areThreeDeeThumbsEnabled'?: boolean;
    /**
    * Does the frontend lock avatar editor input until the wearing call returns
    */
    'isAvatarWearingApiCallsLockingOnFrontendEnabled'?: boolean;
    /**
    * Does the frontend lock avatar editor input until the wearing call returns
    */
    'isOutfitHandlingOnFrontendEnabled'?: boolean;
    /**
    * Determines whether a bunch of UI improvements are released
    */
    'isJustinUiChangesEnabled'?: boolean;
    /**
    * Determines whether Category Reorg is released
    */
    'isCategoryReorgEnabled'?: boolean;
    /**
    * Flag for both web UI and App, name is fixed due to sharing, do not change
    */
    'lCEnabledInEditorAndCatalog'?: boolean;
    /**
    * Useful for the time between enabling Jackets for most users and  all LC types for everyone, meanwhile Soothsayers need all types  at all times
    */
    'isLCCompletelyEnabled'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "enableDefaultClothingMessage",
            "baseName": "enableDefaultClothingMessage",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isAvatarScaleEmbeddedInTab",
            "baseName": "isAvatarScaleEmbeddedInTab",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isBodyTypeScaleOutOfTab",
            "baseName": "isBodyTypeScaleOutOfTab",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "scaleHeightIncrement",
            "baseName": "scaleHeightIncrement",
            "type": "number",
            "format": "double"
        },
        {
            "name": "scaleWidthIncrement",
            "baseName": "scaleWidthIncrement",
            "type": "number",
            "format": "double"
        },
        {
            "name": "scaleHeadIncrement",
            "baseName": "scaleHeadIncrement",
            "type": "number",
            "format": "double"
        },
        {
            "name": "scaleProportionIncrement",
            "baseName": "scaleProportionIncrement",
            "type": "number",
            "format": "double"
        },
        {
            "name": "scaleBodyTypeIncrement",
            "baseName": "scaleBodyTypeIncrement",
            "type": "number",
            "format": "double"
        },
        {
            "name": "supportProportionAndBodyType",
            "baseName": "supportProportionAndBodyType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showDefaultClothingMessageOnPageLoad",
            "baseName": "showDefaultClothingMessageOnPageLoad",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "areThreeDeeThumbsEnabled",
            "baseName": "areThreeDeeThumbsEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isAvatarWearingApiCallsLockingOnFrontendEnabled",
            "baseName": "isAvatarWearingApiCallsLockingOnFrontendEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isOutfitHandlingOnFrontendEnabled",
            "baseName": "isOutfitHandlingOnFrontendEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isJustinUiChangesEnabled",
            "baseName": "isJustinUiChangesEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isCategoryReorgEnabled",
            "baseName": "isCategoryReorgEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lCEnabledInEditorAndCatalog",
            "baseName": "LCEnabledInEditorAndCatalog",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isLCCompletelyEnabled",
            "baseName": "isLCCompletelyEnabled",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return RobloxApiAvatarModelsAvatarMetadataModel.attributeTypeMap;
    }

    public constructor() {
    }
}

