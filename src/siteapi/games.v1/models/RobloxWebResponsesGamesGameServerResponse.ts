/**
 * Games Api v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RobloxGamesApiGameServerPlayerResponse } from '../models/RobloxGamesApiGameServerPlayerResponse';
import { RobloxGamesApiModelsResponseVerifiedBadgeUserResponse } from '../models/RobloxGamesApiModelsResponseVerifiedBadgeUserResponse';
import { HttpFile } from '../../../common/http/http';

/**
* Game server list response model.
*/
export class RobloxWebResponsesGamesGameServerResponse {
    /**
    * The game server ID.
    */
    'id'?: string;
    /**
    * The max number of players allowed to enter the server at the same time.
    */
    'maxPlayers'?: number;
    /**
    * The number of players actively in the server.
    */
    'playing'?: number;
    /**
    * The thumbnail tokens for all the players in the server.
    */
    'playerTokens'?: Array<string>;
    /**
    * The players in the server.
    */
    'players'?: Array<RobloxGamesApiGameServerPlayerResponse>;
    /**
    * The current frames per second the server is running at.
    */
    'fps'?: number;
    /**
    * The game server ping time (measured in milliseconds).
    */
    'ping'?: number;
    /**
    * The name of the private server.
    */
    'name'?: string;
    /**
    * The private server ID.
    */
    'vipServerId'?: number;
    /**
    * The private server access code.
    */
    'accessCode'?: string;
    'owner'?: RobloxGamesApiModelsResponseVerifiedBadgeUserResponse;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "maxPlayers",
            "baseName": "maxPlayers",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "playing",
            "baseName": "playing",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "playerTokens",
            "baseName": "playerTokens",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "players",
            "baseName": "players",
            "type": "Array<RobloxGamesApiGameServerPlayerResponse>",
            "format": ""
        },
        {
            "name": "fps",
            "baseName": "fps",
            "type": "number",
            "format": "double"
        },
        {
            "name": "ping",
            "baseName": "ping",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "vipServerId",
            "baseName": "vipServerId",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "accessCode",
            "baseName": "accessCode",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "RobloxGamesApiModelsResponseVerifiedBadgeUserResponse",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return RobloxWebResponsesGamesGameServerResponse.attributeTypeMap;
    }

    public constructor() {
    }
}

