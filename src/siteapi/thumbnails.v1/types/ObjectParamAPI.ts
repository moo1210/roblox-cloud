import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../../../common/http/http';
import { Configuration} from '../../../common/configuration'

import { RobloxThumbnailsApiModelsUniverseThumbnailsResponse } from '../models/RobloxThumbnailsApiModelsUniverseThumbnailsResponse';
import { RobloxThumbnailsApisModelsThumbnailBatchRequest } from '../models/RobloxThumbnailsApisModelsThumbnailBatchRequest';
import { RobloxThumbsFormatType } from '../models/RobloxThumbsFormatType';
import { RobloxThumbsImageParameters } from '../models/RobloxThumbsImageParameters';
import { RobloxWebResponsesThumbnailsThumbnailBatchResponse } from '../models/RobloxWebResponsesThumbnailsThumbnailBatchResponse';
import { RobloxWebResponsesThumbnailsThumbnailResponse } from '../models/RobloxWebResponsesThumbnailsThumbnailResponse';
import { RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse } from '../models/RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse';
import { RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse } from '../models/RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse';
import { RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse } from '../models/RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse';
import { RobloxWebWebAPIModelsApiErrorModel } from '../models/RobloxWebWebAPIModelsApiErrorModel';

import { ObservableAssetsApi } from "./ObservableAPI";
import { AssetsApiRequestFactory, AssetsApiResponseProcessor} from "../apis/AssetsApi";

export interface AssetsApiV1AssetThumbnailAnimatedGetRequest {
    /**
     * The asset id.
     * @type number
     * @memberof AssetsApiv1AssetThumbnailAnimatedGet
     */
    assetId: number
    /**
     * (optional) placeid
     * @type number
     * @memberof AssetsApiv1AssetThumbnailAnimatedGet
     */
    robloxPlaceId?: number
}

export interface AssetsApiV1AssetsGetRequest {
    /**
     * The asset ids.
     * @type Array&lt;number&gt;
     * @memberof AssetsApiv1AssetsGet
     */
    assetIds: Array<number>
    /**
     * (optional) placeid
     * @type number
     * @memberof AssetsApiv1AssetsGet
     */
    robloxPlaceId?: number
    /**
     * Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).
     * @type &#39;PlaceHolder&#39; | &#39;AutoGenerated&#39; | &#39;ForceAutoGenerated&#39;
     * @memberof AssetsApiv1AssetsGet
     */
    returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;30x30&#39; | &#39;42x42&#39; | &#39;50x50&#39; | &#39;60x62&#39; | &#39;75x75&#39; | &#39;110x110&#39; | &#39;140x140&#39; | &#39;150x150&#39; | &#39;160x100&#39; | &#39;160x600&#39; | &#39;250x250&#39; | &#39;256x144&#39; | &#39;300x250&#39; | &#39;304x166&#39; | &#39;384x216&#39; | &#39;396x216&#39; | &#39;420x420&#39; | &#39;480x270&#39; | &#39;512x512&#39; | &#39;576x324&#39; | &#39;700x700&#39; | &#39;728x90&#39; | &#39;768x432&#39; | &#39;1200x80&#39;
     * @memberof AssetsApiv1AssetsGet
     */
    size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432' | '1200x80'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof AssetsApiv1AssetsGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof AssetsApiv1AssetsGet
     */
    isCircular?: boolean
}

export interface AssetsApiV1AssetsThumbnail3dGetRequest {
    /**
     * The asset id.
     * @type number
     * @memberof AssetsApiv1AssetsThumbnail3dGet
     */
    assetId: number
    /**
     * (optional) placeid
     * @type number
     * @memberof AssetsApiv1AssetsThumbnail3dGet
     */
    robloxPlaceId?: number
}

export class ObjectAssetsApi {
    private api: ObservableAssetsApi

    public constructor(configuration: Configuration, requestFactory?: AssetsApiRequestFactory, responseProcessor?: AssetsApiResponseProcessor) {
        this.api = new ObservableAssetsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Thumbnails asset animated.
     * @param param the request object
     */
    public v1AssetThumbnailAnimatedGetWithHttpInfo(param: AssetsApiV1AssetThumbnailAnimatedGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1AssetThumbnailAnimatedGetWithHttpInfo(param.assetId, param.robloxPlaceId,  options).toPromise();
    }

    /**
     * Thumbnails asset animated.
     * @param param the request object
     */
    public v1AssetThumbnailAnimatedGet(param: AssetsApiV1AssetThumbnailAnimatedGetRequest, options?: Configuration): Promise<RobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1AssetThumbnailAnimatedGet(param.assetId, param.robloxPlaceId,  options).toPromise();
    }

    /**
     * Thumbnails assets.
     * @param param the request object
     */
    public v1AssetsGetWithHttpInfo(param: AssetsApiV1AssetsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1AssetsGetWithHttpInfo(param.assetIds, param.robloxPlaceId, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Thumbnails assets.
     * @param param the request object
     */
    public v1AssetsGet(param: AssetsApiV1AssetsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1AssetsGet(param.assetIds, param.robloxPlaceId, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Thumbnails assets.
     * @param param the request object
     */
    public v1AssetsThumbnail3dGetWithHttpInfo(param: AssetsApiV1AssetsThumbnail3dGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1AssetsThumbnail3dGetWithHttpInfo(param.assetId, param.robloxPlaceId,  options).toPromise();
    }

    /**
     * Thumbnails assets.
     * @param param the request object
     */
    public v1AssetsThumbnail3dGet(param: AssetsApiV1AssetsThumbnail3dGetRequest, options?: Configuration): Promise<RobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1AssetsThumbnail3dGet(param.assetId, param.robloxPlaceId,  options).toPromise();
    }

}

import { ObservableAvatarApi } from "./ObservableAPI";
import { AvatarApiRequestFactory, AvatarApiResponseProcessor} from "../apis/AvatarApi";

export interface AvatarApiV1UsersAvatar3dGetRequest {
    /**
     * user Id for avatar
     * @type number
     * @memberof AvatarApiv1UsersAvatar3dGet
     */
    userId: number
}

export interface AvatarApiV1UsersAvatarBustGetRequest {
    /**
     * CSV for the userIds to get avatar headshots
     * @type Array&lt;number&gt;
     * @memberof AvatarApiv1UsersAvatarBustGet
     */
    userIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;48x48&#39; | &#39;50x50&#39; | &#39;60x60&#39; | &#39;75x75&#39; | &#39;100x100&#39; | &#39;150x150&#39; | &#39;180x180&#39; | &#39;352x352&#39; | &#39;420x420&#39;
     * @memberof AvatarApiv1UsersAvatarBustGet
     */
    size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '150x150' | '180x180' | '352x352' | '420x420'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof AvatarApiv1UsersAvatarBustGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof AvatarApiv1UsersAvatarBustGet
     */
    isCircular?: boolean
}

export interface AvatarApiV1UsersAvatarGetRequest {
    /**
     * CSV for the userIds to get avatar full body shots
     * @type Array&lt;number&gt;
     * @memberof AvatarApiv1UsersAvatarGet
     */
    userIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;30x30&#39; | &#39;48x48&#39; | &#39;60x60&#39; | &#39;75x75&#39; | &#39;100x100&#39; | &#39;110x110&#39; | &#39;140x140&#39; | &#39;150x150&#39; | &#39;150x200&#39; | &#39;180x180&#39; | &#39;250x250&#39; | &#39;352x352&#39; | &#39;420x420&#39; | &#39;720x720&#39;
     * @memberof AvatarApiv1UsersAvatarGet
     */
    size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof AvatarApiv1UsersAvatarGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof AvatarApiv1UsersAvatarGet
     */
    isCircular?: boolean
}

export interface AvatarApiV1UsersAvatarHeadshotGetRequest {
    /**
     * CSV for the userIds to get avatar headshots
     * @type Array&lt;number&gt;
     * @memberof AvatarApiv1UsersAvatarHeadshotGet
     */
    userIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;48x48&#39; | &#39;50x50&#39; | &#39;60x60&#39; | &#39;75x75&#39; | &#39;100x100&#39; | &#39;110x110&#39; | &#39;150x150&#39; | &#39;180x180&#39; | &#39;352x352&#39; | &#39;420x420&#39; | &#39;720x720&#39;
     * @memberof AvatarApiv1UsersAvatarHeadshotGet
     */
    size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof AvatarApiv1UsersAvatarHeadshotGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof AvatarApiv1UsersAvatarHeadshotGet
     */
    isCircular?: boolean
}

export class ObjectAvatarApi {
    private api: ObservableAvatarApi

    public constructor(configuration: Configuration, requestFactory?: AvatarApiRequestFactory, responseProcessor?: AvatarApiResponseProcessor) {
        this.api = new ObservableAvatarApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get Avatar 3d object for a user
     * @param param the request object
     */
    public v1UsersAvatar3dGetWithHttpInfo(param: AvatarApiV1UsersAvatar3dGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersAvatar3dGetWithHttpInfo(param.userId,  options).toPromise();
    }

    /**
     * Get Avatar 3d object for a user
     * @param param the request object
     */
    public v1UsersAvatar3dGet(param: AvatarApiV1UsersAvatar3dGetRequest, options?: Configuration): Promise<RobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersAvatar3dGet(param.userId,  options).toPromise();
    }

    /**
     * Get Avatar Busts for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarBustGetWithHttpInfo(param: AvatarApiV1UsersAvatarBustGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersAvatarBustGetWithHttpInfo(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get Avatar Busts for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarBustGet(param: AvatarApiV1UsersAvatarBustGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersAvatarBustGet(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get Avatar Full body shots for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarGetWithHttpInfo(param: AvatarApiV1UsersAvatarGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersAvatarGetWithHttpInfo(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get Avatar Full body shots for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarGet(param: AvatarApiV1UsersAvatarGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersAvatarGet(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get Avatar Headshots for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarHeadshotGetWithHttpInfo(param: AvatarApiV1UsersAvatarHeadshotGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersAvatarHeadshotGetWithHttpInfo(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get Avatar Headshots for the given CSV of userIds
     * @param param the request object
     */
    public v1UsersAvatarHeadshotGet(param: AvatarApiV1UsersAvatarHeadshotGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersAvatarHeadshotGet(param.userIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableBadgesApi } from "./ObservableAPI";
import { BadgesApiRequestFactory, BadgesApiResponseProcessor} from "../apis/BadgesApi";

export interface BadgesApiV1BadgesIconsGetRequest {
    /**
     * The badge ids.
     * @type Array&lt;number&gt;
     * @memberof BadgesApiv1BadgesIconsGet
     */
    badgeIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39;
     * @memberof BadgesApiv1BadgesIconsGet
     */
    size?: '150x150'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof BadgesApiv1BadgesIconsGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof BadgesApiv1BadgesIconsGet
     */
    isCircular?: boolean
}

export class ObjectBadgesApi {
    private api: ObservableBadgesApi

    public constructor(configuration: Configuration, requestFactory?: BadgesApiRequestFactory, responseProcessor?: BadgesApiResponseProcessor) {
        this.api = new ObservableBadgesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Thumbnails badge icons.
     * @param param the request object
     */
    public v1BadgesIconsGetWithHttpInfo(param: BadgesApiV1BadgesIconsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1BadgesIconsGetWithHttpInfo(param.badgeIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Thumbnails badge icons.
     * @param param the request object
     */
    public v1BadgesIconsGet(param: BadgesApiV1BadgesIconsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1BadgesIconsGet(param.badgeIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableBatchApi } from "./ObservableAPI";
import { BatchApiRequestFactory, BatchApiResponseProcessor} from "../apis/BatchApi";

export interface BatchApiV1BatchPostRequest {
    /**
     * List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust              14. PlaceIcon              15. AutoGeneratedGameIcon              16. ForceAutoGeneratedGameIcon              17. Look
     * @type Array&lt;RobloxThumbnailsApisModelsThumbnailBatchRequest&gt;
     * @memberof BatchApiv1BatchPost
     */
    requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>
    /**
     * (optional) placeid
     * @type number
     * @memberof BatchApiv1BatchPost
     */
    robloxPlaceId?: number
}

export class ObjectBatchApi {
    private api: ObservableBatchApi

    public constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor) {
        this.api = new ObservableBatchApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Returns a list of thumbnails with varying types and sizes
     * @param param the request object
     */
    public v1BatchPostWithHttpInfo(param: BatchApiV1BatchPostRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse>> {
        return this.api.v1BatchPostWithHttpInfo(param.requests, param.robloxPlaceId,  options).toPromise();
    }

    /**
     * Returns a list of thumbnails with varying types and sizes
     * @param param the request object
     */
    public v1BatchPost(param: BatchApiV1BatchPostRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse> {
        return this.api.v1BatchPost(param.requests, param.robloxPlaceId,  options).toPromise();
    }

}

import { ObservableBundlesApi } from "./ObservableAPI";
import { BundlesApiRequestFactory, BundlesApiResponseProcessor} from "../apis/BundlesApi";

export interface BundlesApiV1BundlesThumbnailsGetRequest {
    /**
     * CSV for the bundle ids to get bundle thumbnails
     * @type Array&lt;number&gt;
     * @memberof BundlesApiv1BundlesThumbnailsGet
     */
    bundleIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39; | &#39;420x420&#39;
     * @memberof BundlesApiv1BundlesThumbnailsGet
     */
    size?: '150x150' | '420x420'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof BundlesApiv1BundlesThumbnailsGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof BundlesApiv1BundlesThumbnailsGet
     */
    isCircular?: boolean
}

export class ObjectBundlesApi {
    private api: ObservableBundlesApi

    public constructor(configuration: Configuration, requestFactory?: BundlesApiRequestFactory, responseProcessor?: BundlesApiResponseProcessor) {
        this.api = new ObservableBundlesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get bundle thumbnails for the given CSV of bundle ids
     * @param param the request object
     */
    public v1BundlesThumbnailsGetWithHttpInfo(param: BundlesApiV1BundlesThumbnailsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1BundlesThumbnailsGetWithHttpInfo(param.bundleIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get bundle thumbnails for the given CSV of bundle ids
     * @param param the request object
     */
    public v1BundlesThumbnailsGet(param: BundlesApiV1BundlesThumbnailsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1BundlesThumbnailsGet(param.bundleIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableDeveloperProductsApi } from "./ObservableAPI";
import { DeveloperProductsApiRequestFactory, DeveloperProductsApiResponseProcessor} from "../apis/DeveloperProductsApi";

export interface DeveloperProductsApiV1DeveloperProductsIconsGetRequest {
    /**
     * The developer product ids.
     * @type Array&lt;number&gt;
     * @memberof DeveloperProductsApiv1DeveloperProductsIconsGet
     */
    developerProductIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39; | &#39;420x420&#39;
     * @memberof DeveloperProductsApiv1DeveloperProductsIconsGet
     */
    size?: '150x150' | '420x420'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof DeveloperProductsApiv1DeveloperProductsIconsGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof DeveloperProductsApiv1DeveloperProductsIconsGet
     */
    isCircular?: boolean
}

export class ObjectDeveloperProductsApi {
    private api: ObservableDeveloperProductsApi

    public constructor(configuration: Configuration, requestFactory?: DeveloperProductsApiRequestFactory, responseProcessor?: DeveloperProductsApiResponseProcessor) {
        this.api = new ObservableDeveloperProductsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Thumbnails developer product icons.
     * @param param the request object
     */
    public v1DeveloperProductsIconsGetWithHttpInfo(param: DeveloperProductsApiV1DeveloperProductsIconsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1DeveloperProductsIconsGetWithHttpInfo(param.developerProductIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Thumbnails developer product icons.
     * @param param the request object
     */
    public v1DeveloperProductsIconsGet(param: DeveloperProductsApiV1DeveloperProductsIconsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1DeveloperProductsIconsGet(param.developerProductIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableGamePassesApi } from "./ObservableAPI";
import { GamePassesApiRequestFactory, GamePassesApiResponseProcessor} from "../apis/GamePassesApi";

export interface GamePassesApiV1GamePassesGetRequest {
    /**
     * The game pass ids.
     * @type Array&lt;number&gt;
     * @memberof GamePassesApiv1GamePassesGet
     */
    gamePassIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39;
     * @memberof GamePassesApiv1GamePassesGet
     */
    size?: '150x150'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof GamePassesApiv1GamePassesGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof GamePassesApiv1GamePassesGet
     */
    isCircular?: boolean
}

export class ObjectGamePassesApi {
    private api: ObservableGamePassesApi

    public constructor(configuration: Configuration, requestFactory?: GamePassesApiRequestFactory, responseProcessor?: GamePassesApiResponseProcessor) {
        this.api = new ObservableGamePassesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Thumbnails game pass icons.
     * @param param the request object
     */
    public v1GamePassesGetWithHttpInfo(param: GamePassesApiV1GamePassesGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1GamePassesGetWithHttpInfo(param.gamePassIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Thumbnails game pass icons.
     * @param param the request object
     */
    public v1GamePassesGet(param: GamePassesApiV1GamePassesGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1GamePassesGet(param.gamePassIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableGamesApi } from "./ObservableAPI";
import { GamesApiRequestFactory, GamesApiResponseProcessor} from "../apis/GamesApi";

export interface GamesApiV1GamesIconsGetRequest {
    /**
     * The universe ids.
     * @type Array&lt;number&gt;
     * @memberof GamesApiv1GamesIconsGet
     */
    universeIds: Array<number>
    /**
     * Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).
     * @type &#39;PlaceHolder&#39; | &#39;AutoGenerated&#39; | &#39;ForceAutoGenerated&#39;
     * @memberof GamesApiv1GamesIconsGet
     */
    returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;50x50&#39; | &#39;128x128&#39; | &#39;150x150&#39; | &#39;256x256&#39; | &#39;420x420&#39; | &#39;512x512&#39;
     * @memberof GamesApiv1GamesIconsGet
     */
    size?: '50x50' | '128x128' | '150x150' | '256x256' | '420x420' | '512x512'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof GamesApiv1GamesIconsGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof GamesApiv1GamesIconsGet
     */
    isCircular?: boolean
}

export interface GamesApiV1GamesMultigetThumbnailsGetRequest {
    /**
     * comma-delimited list of universe IDs
     * @type Array&lt;number&gt;
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    universeIds: Array<number>
    /**
     * max number of thumbnails to return per universe
     * @type number
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    countPerUniverse?: number
    /**
     * true if defaults (if any) should be returned if no media exists
     * @type boolean
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    defaults?: boolean
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;768x432&#39; | &#39;576x324&#39; | &#39;480x270&#39; | &#39;384x216&#39; | &#39;256x144&#39;
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof GamesApiv1GamesMultigetThumbnailsGet
     */
    isCircular?: boolean
}

export interface GamesApiV1GamesUniverseIdThumbnailsGetRequest {
    /**
     * 
     * @type number
     * @memberof GamesApiv1GamesUniverseIdThumbnailsGet
     */
    universeId: number
    /**
     * 
     * @type Array&lt;number&gt;
     * @memberof GamesApiv1GamesUniverseIdThumbnailsGet
     */
    thumbnailIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;768x432&#39; | &#39;576x324&#39; | &#39;480x270&#39; | &#39;384x216&#39; | &#39;256x144&#39;
     * @memberof GamesApiv1GamesUniverseIdThumbnailsGet
     */
    size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof GamesApiv1GamesUniverseIdThumbnailsGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof GamesApiv1GamesUniverseIdThumbnailsGet
     */
    isCircular?: boolean
}

export class ObjectGamesApi {
    private api: ObservableGamesApi

    public constructor(configuration: Configuration, requestFactory?: GamesApiRequestFactory, responseProcessor?: GamesApiResponseProcessor) {
        this.api = new ObservableGamesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Fetches game icon URLs for a list of universes\' root places. Ids that do not correspond to a valid universe will be filtered out.
     * @param param the request object
     */
    public v1GamesIconsGetWithHttpInfo(param: GamesApiV1GamesIconsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1GamesIconsGetWithHttpInfo(param.universeIds, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetches game icon URLs for a list of universes\' root places. Ids that do not correspond to a valid universe will be filtered out.
     * @param param the request object
     */
    public v1GamesIconsGet(param: GamesApiV1GamesIconsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1GamesIconsGet(param.universeIds, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetch game thumbnail URLs for a list of universe IDs.
     * @param param the request object
     */
    public v1GamesMultigetThumbnailsGetWithHttpInfo(param: GamesApiV1GamesMultigetThumbnailsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse>> {
        return this.api.v1GamesMultigetThumbnailsGetWithHttpInfo(param.universeIds, param.countPerUniverse, param.defaults, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetch game thumbnail URLs for a list of universe IDs.
     * @param param the request object
     */
    public v1GamesMultigetThumbnailsGet(param: GamesApiV1GamesMultigetThumbnailsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse> {
        return this.api.v1GamesMultigetThumbnailsGet(param.universeIds, param.countPerUniverse, param.defaults, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetches game thumbnail URLs for a list of universes\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.
     * @param param the request object
     */
    public v1GamesUniverseIdThumbnailsGetWithHttpInfo(param: GamesApiV1GamesUniverseIdThumbnailsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1GamesUniverseIdThumbnailsGetWithHttpInfo(param.universeId, param.thumbnailIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetches game thumbnail URLs for a list of universes\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.
     * @param param the request object
     */
    public v1GamesUniverseIdThumbnailsGet(param: GamesApiV1GamesUniverseIdThumbnailsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1GamesUniverseIdThumbnailsGet(param.universeId, param.thumbnailIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableGroupEmblemApi } from "./ObservableAPI";
import { GroupEmblemApiRequestFactory, GroupEmblemApiResponseProcessor} from "../apis/GroupEmblemApi";

export interface GroupEmblemApiV1GroupsIconsGetRequest {
    /**
     * 
     * @type Array&lt;number&gt;
     * @memberof GroupEmblemApiv1GroupsIconsGet
     */
    groupIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39; | &#39;420x420&#39;
     * @memberof GroupEmblemApiv1GroupsIconsGet
     */
    size?: '150x150' | '420x420'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof GroupEmblemApiv1GroupsIconsGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof GroupEmblemApiv1GroupsIconsGet
     */
    isCircular?: boolean
}

export class ObjectGroupEmblemApi {
    private api: ObservableGroupEmblemApi

    public constructor(configuration: Configuration, requestFactory?: GroupEmblemApiRequestFactory, responseProcessor?: GroupEmblemApiResponseProcessor) {
        this.api = new ObservableGroupEmblemApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.
     * @param param the request object
     */
    public v1GroupsIconsGetWithHttpInfo(param: GroupEmblemApiV1GroupsIconsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1GroupsIconsGetWithHttpInfo(param.groupIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.
     * @param param the request object
     */
    public v1GroupsIconsGet(param: GroupEmblemApiV1GroupsIconsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1GroupsIconsGet(param.groupIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservableOutfitsApi } from "./ObservableAPI";
import { OutfitsApiRequestFactory, OutfitsApiResponseProcessor} from "../apis/OutfitsApi";

export interface OutfitsApiV1UsersOutfit3dGetRequest {
    /**
     * CSV for the userIds to get user outfits
     * @type number
     * @memberof OutfitsApiv1UsersOutfit3dGet
     */
    outfitId: number
}

export interface OutfitsApiV1UsersOutfitsGetRequest {
    /**
     * CSV for the userOutfitIds to get user outfits
     * @type Array&lt;number&gt;
     * @memberof OutfitsApiv1UsersOutfitsGet
     */
    userOutfitIds: Array<number>
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;150x150&#39; | &#39;420x420&#39;
     * @memberof OutfitsApiv1UsersOutfitsGet
     */
    size?: '150x150' | '420x420'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Webp&#39;
     * @memberof OutfitsApiv1UsersOutfitsGet
     */
    format?: 'Png' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof OutfitsApiv1UsersOutfitsGet
     */
    isCircular?: boolean
}

export class ObjectOutfitsApi {
    private api: ObservableOutfitsApi

    public constructor(configuration: Configuration, requestFactory?: OutfitsApiRequestFactory, responseProcessor?: OutfitsApiResponseProcessor) {
        this.api = new ObservableOutfitsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Get 3d object for an outfit
     * @param param the request object
     */
    public v1UsersOutfit3dGetWithHttpInfo(param: OutfitsApiV1UsersOutfit3dGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersOutfit3dGetWithHttpInfo(param.outfitId,  options).toPromise();
    }

    /**
     * Get 3d object for an outfit
     * @param param the request object
     */
    public v1UsersOutfit3dGet(param: OutfitsApiV1UsersOutfit3dGetRequest, options?: Configuration): Promise<RobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersOutfit3dGet(param.outfitId,  options).toPromise();
    }

    /**
     * Get outfits for the given CSV of userOutfitIds
     * @param param the request object
     */
    public v1UsersOutfitsGetWithHttpInfo(param: OutfitsApiV1UsersOutfitsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1UsersOutfitsGetWithHttpInfo(param.userOutfitIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Get outfits for the given CSV of userOutfitIds
     * @param param the request object
     */
    public v1UsersOutfitsGet(param: OutfitsApiV1UsersOutfitsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1UsersOutfitsGet(param.userOutfitIds, param.size, param.format, param.isCircular,  options).toPromise();
    }

}

import { ObservablePlacesApi } from "./ObservableAPI";
import { PlacesApiRequestFactory, PlacesApiResponseProcessor} from "../apis/PlacesApi";

export interface PlacesApiV1PlacesGameiconsGetRequest {
    /**
     * The place ids.
     * @type Array&lt;number&gt;
     * @memberof PlacesApiv1PlacesGameiconsGet
     */
    placeIds: Array<number>
    /**
     * Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).
     * @type &#39;PlaceHolder&#39; | &#39;AutoGenerated&#39; | &#39;ForceAutoGenerated&#39;
     * @memberof PlacesApiv1PlacesGameiconsGet
     */
    returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'
    /**
     * The thumbnail size, formatted widthxheight
     * @type &#39;50x50&#39; | &#39;128x128&#39; | &#39;150x150&#39; | &#39;256x256&#39; | &#39;420x420&#39; | &#39;512x512&#39;
     * @memberof PlacesApiv1PlacesGameiconsGet
     */
    size?: '50x50' | '128x128' | '150x150' | '256x256' | '420x420' | '512x512'
    /**
     * The thumbnail format
     * @type &#39;Png&#39; | &#39;Jpeg&#39; | &#39;Webp&#39;
     * @memberof PlacesApiv1PlacesGameiconsGet
     */
    format?: 'Png' | 'Jpeg' | 'Webp'
    /**
     * The circle thumbnail output parameter, true or false
     * @type boolean
     * @memberof PlacesApiv1PlacesGameiconsGet
     */
    isCircular?: boolean
}

export class ObjectPlacesApi {
    private api: ObservablePlacesApi

    public constructor(configuration: Configuration, requestFactory?: PlacesApiRequestFactory, responseProcessor?: PlacesApiResponseProcessor) {
        this.api = new ObservablePlacesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.
     * @param param the request object
     */
    public v1PlacesGameiconsGetWithHttpInfo(param: PlacesApiV1PlacesGameiconsGetRequest, options?: Configuration): Promise<HttpInfo<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {
        return this.api.v1PlacesGameiconsGetWithHttpInfo(param.placeIds, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

    /**
     * Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.
     * @param param the request object
     */
    public v1PlacesGameiconsGet(param: PlacesApiV1PlacesGameiconsGetRequest, options?: Configuration): Promise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {
        return this.api.v1PlacesGameiconsGet(param.placeIds, param.returnPolicy, param.size, param.format, param.isCircular,  options).toPromise();
    }

}
